akka {
  loglevel = "INFO"
  actor.provider = cluster
  actor.warn-about-java-serializer-usage = on

  actor {
    serializers {
      pet-added = "it.pagopa.pdnd.uservice.resttemplate.model.persistence.serializer.PetAddedSerializer"
      pet-deleted = "it.pagopa.pdnd.uservice.resttemplate.model.persistence.serializer.PetDeletedSerializer"
      state = "it.pagopa.pdnd.uservice.resttemplate.model.persistence.serializer.StateSerializer"
    }
    serialization-identifiers {
      "it.pagopa.pdnd.uservice.resttemplate.model.persistence.serializer.PetAddedSerializer" = 100000
      "it.pagopa.pdnd.uservice.resttemplate.model.persistence.serializer.PetDeletedSerializer" = 100001
      "it.pagopa.pdnd.uservice.resttemplate.model.persistence.serializer.StateSerializer" = 200000
      "java.io.serializable" = none
    }
    serialization-bindings {
      "it.pagopa.pdnd.uservice.resttemplate.model.persistence.PetAdded" = pet-added
      "it.pagopa.pdnd.uservice.resttemplate.model.persistence.PetDeleted" = pet-deleted
      "it.pagopa.pdnd.uservice.resttemplate.model.persistence.State" = state
    }
  }

  remote.artery {
    canonical.port = 2552
    canonical.hostname = 127.0.0.1
  }

  cluster {
    seed-nodes = ["akka://pdnd-uservice-rest-template-system@127.0.0.1:2552"]

    sharding {
      number-of-shards = 10
    }
    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
  }

  persistence {
    journal.plugin =  "akka.persistence.journal.inmem"
    snapshot-store.plugin = "akka.persistence.snapshot-store.local"
    snapshot-store.local.dir = "snapshots"
  }
  typed {
    stash-capacity = 200000
  }
}

akka.management {
  http {
    hostname = "0.0.0.0"
  }
  health-checks {
    readiness-checks {
      ready = "it.pagopa.pdnd.uservice.resttemplate.server.impl.HealthCheck"
    }
    liveness-checks {
      live = "it.pagopa.pdnd.uservice.resttemplate.server.impl.LiveCheck"
    }
  }
}

kamon.prometheus {
  embedded-server {
    hostname = 0.0.0.0
  }
}

kamon.instrumentation.akka.http {
  server {
    propagation {
      enabled = yes
      channel = default
    }
  }

  client {
    propagation {
      enabled = yes
      channel = default
    }
  }
}

kamon.instrumentation.akka.http {
  server.metrics {
    enabled = yes
  }
}

kamon.instrumentation.akka.http {
  server {
    tracing {
      enabled = yes
      span-metrics = on
    }
  }

  client {
    tracing {
      enabled = yes
      span-metrics = on
    }
  }
}